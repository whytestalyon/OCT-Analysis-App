/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oct.analysis.application;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;
import oct.analysis.application.dat.OCTAnalysisManager;
import oct.analysis.application.dat.OCT;
import oct.analysis.application.dat.SelectionLRPManager;
import oct.io.TiffReader;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.StandardChartTheme;

/**
 *
 * @author Brandon
 */
public class OCTAnalysisUI extends javax.swing.JFrame {

    private boolean selectFoveaMode = false;
    private final OCTAnalysisManager analysisMetrics = OCTAnalysisManager.getInstance();
    private final SelectionLRPManager selectionLRPManager = SelectionLRPManager.getInstance();
    private DecimalFormat df = new DecimalFormat("#.00");

    static {
        // set a chart theme using the new shadow generator feature available in
        // 1.0.14 - for backwards compatibility it is not enabled by default
        ChartFactory.setChartTheme(new StandardChartTheme("JFree/Shadow",
                true));
    }

    /**
     * Creates new form OCTAnalysisUI
     */
    public OCTAnalysisUI() {
        initComponents();
        //get current selection width setting
        selectionLRPManager.setSelectionWidth(widthSlider.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        lrpButtonGroup = new javax.swing.ButtonGroup();
        selModeButtonGroup = new javax.swing.ButtonGroup();
        octAnalysisPanel = new oct.analysis.application.OCTImagePanel();
        modesPanels = new javax.swing.JPanel();
        lrpModePanel = new javax.swing.JPanel();
        linearLRPModeButton = new javax.swing.JRadioButton();
        logModeLRPButton = new javax.swing.JRadioButton();
        selectionWidthModePanel = new javax.swing.JPanel();
        pixelModeButton = new javax.swing.JRadioButton();
        micronModeButton = new javax.swing.JRadioButton();
        selectionWidthSliderPanel = new javax.swing.JPanel();
        widthSlider = new javax.swing.JSlider();
        smoothingPanel = new javax.swing.JPanel();
        smoothingSlider = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        analysisMenu = new javax.swing.JMenu();
        foveaSelectMenuItem = new javax.swing.JCheckBoxMenuItem();
        pixelDistRatioMenuItem = new javax.swing.JMenuItem();
        lrpMenuItem = new javax.swing.JMenuItem();

        openFileChooser.setDialogTitle("Select OCT...");
        openFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        octAnalysisPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                octAnalysisPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout octAnalysisPanelLayout = new javax.swing.GroupLayout(octAnalysisPanel);
        octAnalysisPanel.setLayout(octAnalysisPanelLayout);
        octAnalysisPanelLayout.setHorizontalGroup(
            octAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        octAnalysisPanelLayout.setVerticalGroup(
            octAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        modesPanels.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lrpModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LRP Mode"));

        lrpButtonGroup.add(linearLRPModeButton);
        linearLRPModeButton.setSelected(true);
        linearLRPModeButton.setText("Linear LRP");

        lrpButtonGroup.add(logModeLRPButton);
        logModeLRPButton.setText("Logrithmic LRP");
        logModeLRPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logModeLRPButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lrpModePanelLayout = new javax.swing.GroupLayout(lrpModePanel);
        lrpModePanel.setLayout(lrpModePanelLayout);
        lrpModePanelLayout.setHorizontalGroup(
            lrpModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lrpModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lrpModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linearLRPModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logModeLRPButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addContainerGap())
        );
        lrpModePanelLayout.setVerticalGroup(
            lrpModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lrpModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(linearLRPModeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logModeLRPButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectionWidthModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection Width Mode"));

        selModeButtonGroup.add(pixelModeButton);
        pixelModeButton.setSelected(true);
        pixelModeButton.setText("Pixels");
        pixelModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixelModeButtonActionPerformed(evt);
            }
        });

        selModeButtonGroup.add(micronModeButton);
        micronModeButton.setText("Microns");
        micronModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micronModeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectionWidthModePanelLayout = new javax.swing.GroupLayout(selectionWidthModePanel);
        selectionWidthModePanel.setLayout(selectionWidthModePanelLayout);
        selectionWidthModePanelLayout.setHorizontalGroup(
            selectionWidthModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pixelModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(micronModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        selectionWidthModePanelLayout.setVerticalGroup(
            selectionWidthModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionWidthModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pixelModeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(micronModeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectionWidthSliderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Selection Width"));

        widthSlider.setMajorTickSpacing(2);
        widthSlider.setMaximum(15);
        widthSlider.setMinimum(1);
        widthSlider.setMinorTickSpacing(1);
        widthSlider.setPaintLabels(true);
        widthSlider.setPaintTicks(true);
        widthSlider.setSnapToTicks(true);
        widthSlider.setValue(5);
        widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout selectionWidthSliderPanelLayout = new javax.swing.GroupLayout(selectionWidthSliderPanel);
        selectionWidthSliderPanel.setLayout(selectionWidthSliderPanelLayout);
        selectionWidthSliderPanelLayout.setHorizontalGroup(
            selectionWidthSliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(widthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
        );
        selectionWidthSliderPanelLayout.setVerticalGroup(
            selectionWidthSliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectionWidthSliderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(widthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout modesPanelsLayout = new javax.swing.GroupLayout(modesPanels);
        modesPanels.setLayout(modesPanelsLayout);
        modesPanelsLayout.setHorizontalGroup(
            modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modesPanelsLayout.createSequentialGroup()
                .addComponent(lrpModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionWidthModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionWidthSliderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modesPanelsLayout.setVerticalGroup(
            modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lrpModePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(selectionWidthModePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(selectionWidthSliderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        smoothingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LRP Smoothing Factor"));

        smoothingSlider.setMajorTickSpacing(5);
        smoothingSlider.setMaximum(50);
        smoothingSlider.setMinorTickSpacing(1);
        smoothingSlider.setPaintLabels(true);
        smoothingSlider.setPaintTicks(true);
        smoothingSlider.setSnapToTicks(true);
        smoothingSlider.setValue(10);
        smoothingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                smoothingSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout smoothingPanelLayout = new javax.swing.GroupLayout(smoothingPanel);
        smoothingPanel.setLayout(smoothingPanelLayout);
        smoothingPanelLayout.setHorizontalGroup(
            smoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(smoothingSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        smoothingPanelLayout.setVerticalGroup(
            smoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(smoothingSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jMenu1.setText("File");

        fileOpenMenuItem.setText("Open");
        fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(fileOpenMenuItem);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        analysisMenu.setText("Analysis");
        analysisMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisMenuActionPerformed(evt);
            }
        });

        foveaSelectMenuItem.setText("Select Fovea");
        foveaSelectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foveaSelectMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(foveaSelectMenuItem);

        pixelDistRatioMenuItem.setText("Set Pixel/Distance Ratio");
        pixelDistRatioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixelDistRatioMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(pixelDistRatioMenuItem);

        lrpMenuItem.setText("Generate LRPs");
        lrpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lrpMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(lrpMenuItem);

        jMenuBar1.add(analysisMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(modesPanels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(smoothingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(octAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smoothingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modesPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
        openFileChooser.setFileFilter(new FileNameExtensionFilter("TIFF files", "tiff", "tif"));
        openFileChooser.setMultiSelectionEnabled(false);
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File tiffFile = openFileChooser.getSelectedFile();
            try {
                //read in image and keep track of the image for later use
                BufferedImage tiffBI = TiffReader.readTiffImage(tiffFile);
                System.out.println("Read in tiff image!");
                OCT oct = getOCT(tiffBI);
                if (oct == null) {
                    throw new IOException("OCT information missing, couldn't load OCT for analysis.");
                }
                //add the OCT to the analysis manager, it will take care of making it available to the OCT image panel for drawing
                analysisMetrics.setOct(oct);
                //display the selected image in the display
                octAnalysisPanel.setSize(new Dimension(tiffBI.getWidth(), tiffBI.getHeight()));
                octAnalysisPanel.repaint();
                validate();
                pack();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Image loading failed for " + tiffFile.getAbsolutePath()
                        + ", reason: " + ex.getMessage(), "Loading error!", JOptionPane.ERROR_MESSAGE
                );
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileOpenMenuItemActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void openFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFileChooserActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void foveaSelectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foveaSelectMenuItemActionPerformed
        //toggle if we are in fovea selection mode
        selectFoveaMode = !selectFoveaMode;
    }//GEN-LAST:event_foveaSelectMenuItemActionPerformed

    private void octAnalysisPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_octAnalysisPanelMouseClicked
        //only perform actions when mouse click occurs over image area
        if (selectFoveaMode && analysisMetrics.getOct() != null && analysisMetrics.getOct().coordinateOverlapsOCT(evt.getX(), evt.getY())) {
            switch (evt.getButton()) {
                case MouseEvent.BUTTON1:
                    //clear out any current analysis information
                    selectionLRPManager.removeSelections(true);
                    octAnalysisPanel.repaint();
                    //add new selections and redraw panel
                    selectionLRPManager.addSelections(evt.getX());
                    octAnalysisPanel.repaint();
                    break;
                case MouseEvent.BUTTON3:
                    selectionLRPManager.removeSelections(true);
                    octAnalysisPanel.repaint();
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_octAnalysisPanelMouseClicked

    private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSliderStateChanged
        //update the selection width
        selectionLRPManager.setSelectionWidth(((JSlider) evt.getSource()).getValue());
        //clear out the current set of analysis selections, but leave any open LRPs up for update from new selections
        selectionLRPManager.removeSelections(false);
        octAnalysisPanel.repaint();
        //update to new selections and redraw panel and update LRPs
        selectionLRPManager.addSelections(selectionLRPManager.getFoveaCenterXPosition());
        octAnalysisPanel.repaint();
    }//GEN-LAST:event_widthSliderStateChanged

    private void pixelDistRatioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pixelDistRatioMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pixelDistRatioMenuItemActionPerformed

    private void analysisMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisMenuActionPerformed

    }//GEN-LAST:event_analysisMenuActionPerformed

    private void lrpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lrpMenuItemActionPerformed
        System.out.println("Displaying LRPs...");
        selectionLRPManager.displayLRPs(this);
    }//GEN-LAST:event_lrpMenuItemActionPerformed

    private void logModeLRPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logModeLRPButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logModeLRPButtonActionPerformed

    private void pixelModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pixelModeButtonActionPerformed
        widthSlider.setLabelTable(widthSlider.createStandardLabels(2));
    }//GEN-LAST:event_pixelModeButtonActionPerformed

    private void micronModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micronModeButtonActionPerformed
        Hashtable<Integer, JLabel> labelTable = new Hashtable<>();
        for (int i = 1; i < 16; i++) {
            if (i % 2 == 1) {
                labelTable.put(i, new JLabel(df.format((double) i * analysisMetrics.getOct().getScale())));
            }
        }
        widthSlider.setLabelTable(labelTable);
    }//GEN-LAST:event_micronModeButtonActionPerformed

    private void smoothingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_smoothingSliderStateChanged
        //update smoothing factor for LRPs
        int value = ((JSlider) evt.getSource()).getValue();
        value = (value == 0) ? 1 : value; //can't have a value of zero for smoothing
        selectionLRPManager.setLrpSmoothingFactor(value);
        //update LRPs to use new smoothing factor
        selectionLRPManager.updateSelections(selectionLRPManager.getSelections());
    }//GEN-LAST:event_smoothingSliderStateChanged

    private OCT getOCT(BufferedImage octImage) {
        //ask for the desired distance between selections
        double micronsBetweenSelections = oct.io.Util.parseNumberFromInput((String) JOptionPane.showInputDialog(this, "Enter the desired distance between selections(microns):", "Distance between selections", JOptionPane.QUESTION_MESSAGE));
        analysisMetrics.setMicronsBetweenSelections((int) micronsBetweenSelections);
        //ask how the user would like to convey the scale (microns per pixel)
        //for the image
        Object[] options = {"I have the scale!",
            "I have axial length and scan width!"};
        int n = JOptionPane.showOptionDialog(this,
                "We need to know the scale of the OCT. What information do you have?",
                "Determine OCT Scale...",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, //do not use a custom Icon
                options, //the titles of buttons
                options[0]); //default button title
        switch (n) {
            case JOptionPane.YES_OPTION:
                double scale = oct.io.Util.parseNumberFromInput((String) JOptionPane.showInputDialog(this, "Enter OCT scale (microns per pixel):", "Scale input", JOptionPane.QUESTION_MESSAGE));
                return new OCT(scale, octImage);
            case JOptionPane.NO_OPTION:
                double nominalScanWidth = oct.io.Util.parseNumberFromInput((String) JOptionPane.showInputDialog(this, "Enter OCT nominal scan length(millimeter):", "Scale input", JOptionPane.QUESTION_MESSAGE));
                double axialLength = oct.io.Util.parseNumberFromInput((String) JOptionPane.showInputDialog(this, "Enter OCT scale (millimeter):", "Scale input", JOptionPane.QUESTION_MESSAGE));
                return new OCT(axialLength, nominalScanWidth, octAnalysisPanel.getWidth(), octImage);
            default:
                break;
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OCTAnalysisUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu analysisMenu;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JCheckBoxMenuItem foveaSelectMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButton linearLRPModeButton;
    private javax.swing.JRadioButton logModeLRPButton;
    private javax.swing.ButtonGroup lrpButtonGroup;
    private javax.swing.JMenuItem lrpMenuItem;
    private javax.swing.JPanel lrpModePanel;
    private javax.swing.JRadioButton micronModeButton;
    private javax.swing.JPanel modesPanels;
    private oct.analysis.application.OCTImagePanel octAnalysisPanel;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem pixelDistRatioMenuItem;
    private javax.swing.JRadioButton pixelModeButton;
    private javax.swing.ButtonGroup selModeButtonGroup;
    private javax.swing.JPanel selectionWidthModePanel;
    private javax.swing.JPanel selectionWidthSliderPanel;
    private javax.swing.JPanel smoothingPanel;
    private javax.swing.JSlider smoothingSlider;
    private javax.swing.JSlider widthSlider;
    // End of variables declaration//GEN-END:variables
}
