/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oct.analysis.application;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Hashtable;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.MenuElement;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import oct.analysis.application.dat.AnalysisMode;
import oct.analysis.application.dat.OCTAnalysisManager;
import oct.analysis.application.dat.OCT;
import oct.analysis.application.dat.OCTMode;
import oct.analysis.application.dat.SelectionLRPManager;
import oct.analysis.application.dat.ToolMode;
import oct.io.TiffReader;
import oct.util.Util;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.StandardChartTheme;

/**
 *
 * @author Brandon
 */
public class OCTAnalysisUI extends javax.swing.JFrame {

    private final OCTAnalysisManager analysisMetrics = OCTAnalysisManager.getInstance();
    private final SelectionLRPManager selectionLRPManager = SelectionLRPManager.getInstance();
    private final DecimalFormat df = new DecimalFormat("#.00");
    private AnalysisMode analysisMode = null;
    private ToolMode toolMode = ToolMode.NONE;

    static {
        // set a chart theme using the new shadow generator feature available in
        // 1.0.14 - for backwards compatibility it is not enabled by default
        ChartFactory.setChartTheme(new StandardChartTheme("JFree/Shadow", true));
    }

    /**
     * Creates new form OCTAnalysisUI
     */
    public OCTAnalysisUI() {
        initComponents();
        //get current selection width setting
        selectionLRPManager.setSelectionWidth(widthSlider.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        lrpButtonGroup = new javax.swing.ButtonGroup();
        selModeButtonGroup = new javax.swing.ButtonGroup();
        analysisToolBarBtnGroup = new javax.swing.ButtonGroup();
        toolsToolBarBtnGroup = new javax.swing.ButtonGroup();
        octAnalysisPanel = new oct.analysis.application.OCTImagePanel();
        modesPanels = new javax.swing.JPanel();
        octModePanel = new javax.swing.JPanel();
        linearOCTModeButton = new javax.swing.JRadioButton();
        logModeOCTButton = new javax.swing.JRadioButton();
        selectionWidthModePanel = new javax.swing.JPanel();
        pixelModeButton = new javax.swing.JRadioButton();
        micronModeButton = new javax.swing.JRadioButton();
        selectionWidthSliderPanel = new javax.swing.JPanel();
        widthSlider = new javax.swing.JSlider();
        lrpSmoothingPanel = new javax.swing.JPanel();
        lrpSmoothingSlider = new javax.swing.JSlider();
        octSmoothingPanel = new javax.swing.JPanel();
        octSmoothingSlider = new javax.swing.JSlider();
        sharpRadiusPanel = new javax.swing.JPanel();
        octSharpRadiusSlider = new javax.swing.JSlider();
        octSharpWeightPanel = new javax.swing.JPanel();
        octSharpWeightSlider = new javax.swing.JSlider();
        jToolBar1 = new javax.swing.JToolBar();
        ezAnalysisToggleButton = new javax.swing.JToggleButton();
        spatialAnalysisToggleButton = new javax.swing.JToggleButton();
        mirrorAnalysisToggleButton = new javax.swing.JToggleButton();
        singleLRPAnalysisToggleButton = new javax.swing.JToggleButton();
        analysisToolsToolBar = new javax.swing.JToolBar();
        foveaSelectButton = new javax.swing.JToggleButton();
        singleSelectButton = new javax.swing.JToggleButton();
        screenSelectButton = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        analysisMenu = new javax.swing.JMenu();
        spatialAnalysisMenuItem = new javax.swing.JMenuItem();
        ezAnalysisMenuItem = new javax.swing.JMenuItem();
        singleLRPAnalysisMenuItem = new javax.swing.JMenuItem();
        mirrorAnalysisMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        foveaSelectMenuItem = new javax.swing.JCheckBoxMenuItem();
        singleSelectMenuItem = new javax.swing.JCheckBoxMenuItem();
        lrpMenuItem = new javax.swing.JMenuItem();

        openFileChooser.setDialogTitle("Select OCT...");
        openFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        octAnalysisPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        octAnalysisPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                octAnalysisPanelMouseClicked(evt);
            }
        });
        octAnalysisPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                octAnalysisPanelKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                octAnalysisPanelKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout octAnalysisPanelLayout = new javax.swing.GroupLayout(octAnalysisPanel);
        octAnalysisPanel.setLayout(octAnalysisPanelLayout);
        octAnalysisPanelLayout.setHorizontalGroup(
            octAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        octAnalysisPanelLayout.setVerticalGroup(
            octAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );

        modesPanels.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        octModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Mode"));

        lrpButtonGroup.add(linearOCTModeButton);
        linearOCTModeButton.setText("Linear OCT");
        linearOCTModeButton.setToolTipText("Display the OCT image as a Linear Image");
        linearOCTModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearOCTModeButtonActionPerformed(evt);
            }
        });

        lrpButtonGroup.add(logModeOCTButton);
        logModeOCTButton.setSelected(true);
        logModeOCTButton.setText("Logrithmic OCT");
        logModeOCTButton.setToolTipText("Display the OCT image as a Logrithmic Image");
        logModeOCTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logModeOCTButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout octModePanelLayout = new javax.swing.GroupLayout(octModePanel);
        octModePanel.setLayout(octModePanelLayout);
        octModePanelLayout.setHorizontalGroup(
            octModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(octModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(octModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linearOCTModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logModeOCTButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addContainerGap())
        );
        octModePanelLayout.setVerticalGroup(
            octModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(octModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(linearOCTModeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logModeOCTButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectionWidthModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection Width Mode"));

        selModeButtonGroup.add(pixelModeButton);
        pixelModeButton.setSelected(true);
        pixelModeButton.setText("Pixels");
        pixelModeButton.setToolTipText("Display selection widths in terms of Pixels");
        pixelModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixelModeButtonActionPerformed(evt);
            }
        });

        selModeButtonGroup.add(micronModeButton);
        micronModeButton.setText("Microns");
        micronModeButton.setToolTipText("Display selection width in terms of Microns");
        micronModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                micronModeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectionWidthModePanelLayout = new javax.swing.GroupLayout(selectionWidthModePanel);
        selectionWidthModePanel.setLayout(selectionWidthModePanelLayout);
        selectionWidthModePanelLayout.setHorizontalGroup(
            selectionWidthModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pixelModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(micronModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        selectionWidthModePanelLayout.setVerticalGroup(
            selectionWidthModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionWidthModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pixelModeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(micronModeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectionWidthSliderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Selection Width"));

        widthSlider.setMajorTickSpacing(2);
        widthSlider.setMaximum(15);
        widthSlider.setMinimum(1);
        widthSlider.setMinorTickSpacing(1);
        widthSlider.setPaintLabels(true);
        widthSlider.setPaintTicks(true);
        widthSlider.setSnapToTicks(true);
        widthSlider.setToolTipText("Adjust the width of the OCT selections");
        widthSlider.setValue(5);
        widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout selectionWidthSliderPanelLayout = new javax.swing.GroupLayout(selectionWidthSliderPanel);
        selectionWidthSliderPanel.setLayout(selectionWidthSliderPanelLayout);
        selectionWidthSliderPanelLayout.setHorizontalGroup(
            selectionWidthSliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(widthSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );
        selectionWidthSliderPanelLayout.setVerticalGroup(
            selectionWidthSliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectionWidthSliderPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(widthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lrpSmoothingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LRP Smoothing Factor"));

        lrpSmoothingSlider.setMajorTickSpacing(5);
        lrpSmoothingSlider.setMaximum(50);
        lrpSmoothingSlider.setMinorTickSpacing(1);
        lrpSmoothingSlider.setPaintLabels(true);
        lrpSmoothingSlider.setPaintTicks(true);
        lrpSmoothingSlider.setSnapToTicks(true);
        lrpSmoothingSlider.setToolTipText("Adjust the smoothing applied to LRPs (values of 0 and 1 have the same effect)");
        lrpSmoothingSlider.setValue(5);
        lrpSmoothingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lrpSmoothingSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout lrpSmoothingPanelLayout = new javax.swing.GroupLayout(lrpSmoothingPanel);
        lrpSmoothingPanel.setLayout(lrpSmoothingPanelLayout);
        lrpSmoothingPanelLayout.setHorizontalGroup(
            lrpSmoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lrpSmoothingSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        );
        lrpSmoothingPanelLayout.setVerticalGroup(
            lrpSmoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lrpSmoothingSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        octSmoothingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Smoothing Factor"));

        octSmoothingSlider.setMajorTickSpacing(5);
        octSmoothingSlider.setMaximum(50);
        octSmoothingSlider.setMinorTickSpacing(1);
        octSmoothingSlider.setPaintLabels(true);
        octSmoothingSlider.setPaintTicks(true);
        octSmoothingSlider.setSnapToTicks(true);
        octSmoothingSlider.setToolTipText("Adjust the smoothing of the OCT image (performed using a 3x3 Gausian blur)");
        octSmoothingSlider.setValue(0);
        octSmoothingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                octSmoothingSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout octSmoothingPanelLayout = new javax.swing.GroupLayout(octSmoothingPanel);
        octSmoothingPanel.setLayout(octSmoothingPanelLayout);
        octSmoothingPanelLayout.setHorizontalGroup(
            octSmoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSmoothingSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        octSmoothingPanelLayout.setVerticalGroup(
            octSmoothingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSmoothingSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        sharpRadiusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Sharpen Radius"));

        octSharpRadiusSlider.setMajorTickSpacing(10);
        octSharpRadiusSlider.setMaximum(150);
        octSharpRadiusSlider.setMinorTickSpacing(2);
        octSharpRadiusSlider.setPaintLabels(true);
        octSharpRadiusSlider.setPaintTicks(true);
        octSharpRadiusSlider.setSnapToTicks(true);
        octSharpRadiusSlider.setToolTipText("Adjust the smoothing of the OCT image (performed using a 3x3 Gausian blur)");
        octSharpRadiusSlider.setValue(0);
        octSharpRadiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                octSharpRadiusSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout sharpRadiusPanelLayout = new javax.swing.GroupLayout(sharpRadiusPanel);
        sharpRadiusPanel.setLayout(sharpRadiusPanelLayout);
        sharpRadiusPanelLayout.setHorizontalGroup(
            sharpRadiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSharpRadiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sharpRadiusPanelLayout.setVerticalGroup(
            sharpRadiusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSharpRadiusSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        octSharpWeightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("OCT Sharpen Weight Factor"));

        octSharpWeightSlider.setMajorTickSpacing(10);
        octSharpWeightSlider.setMinorTickSpacing(2);
        octSharpWeightSlider.setPaintLabels(true);
        octSharpWeightSlider.setPaintTicks(true);
        octSharpWeightSlider.setToolTipText("Adjust the smoothing of the OCT image (performed using a 3x3 Gausian blur)");
        octSharpWeightSlider.setValue(0);
        octSharpWeightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                octSharpWeightSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout octSharpWeightPanelLayout = new javax.swing.GroupLayout(octSharpWeightPanel);
        octSharpWeightPanel.setLayout(octSharpWeightPanelLayout);
        octSharpWeightPanelLayout.setHorizontalGroup(
            octSharpWeightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSharpWeightSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        octSharpWeightPanelLayout.setVerticalGroup(
            octSharpWeightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(octSharpWeightSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout modesPanelsLayout = new javax.swing.GroupLayout(modesPanels);
        modesPanels.setLayout(modesPanelsLayout);
        modesPanelsLayout.setHorizontalGroup(
            modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modesPanelsLayout.createSequentialGroup()
                .addComponent(octModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionWidthModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionWidthSliderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(modesPanelsLayout.createSequentialGroup()
                .addGroup(modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lrpSmoothingPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(octSmoothingPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sharpRadiusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(octSharpWeightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        modesPanelsLayout.setVerticalGroup(
            modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modesPanelsLayout.createSequentialGroup()
                .addGroup(modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(octSmoothingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sharpRadiusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lrpSmoothingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(octSharpWeightPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modesPanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(octModePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectionWidthModePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectionWidthSliderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jToolBar1.setRollover(true);

        ezAnalysisToggleButton.setAction(ezAnalysisMenuItem.getAction());
        analysisToolBarBtnGroup.add(ezAnalysisToggleButton);
        ezAnalysisToggleButton.setText("EZ");
        ezAnalysisToggleButton.setToolTipText("Elipsoid Zone Analysis");
        ezAnalysisToggleButton.setFocusable(false);
        ezAnalysisToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ezAnalysisToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ezAnalysisToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ezAnalysisToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(ezAnalysisToggleButton);

        spatialAnalysisToggleButton.setAction(spatialAnalysisMenuItem.getAction());
        analysisToolBarBtnGroup.add(spatialAnalysisToggleButton);
        spatialAnalysisToggleButton.setText("Spatial");
        spatialAnalysisToggleButton.setToolTipText("Spatial Analysis");
        spatialAnalysisToggleButton.setFocusable(false);
        spatialAnalysisToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        spatialAnalysisToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        spatialAnalysisToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spatialAnalysisToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(spatialAnalysisToggleButton);

        mirrorAnalysisToggleButton.setAction(mirrorAnalysisMenuItem.getAction());
        analysisToolBarBtnGroup.add(mirrorAnalysisToggleButton);
        mirrorAnalysisToggleButton.setText("Mirror");
        mirrorAnalysisToggleButton.setToolTipText("Mirror Around Fovea Analysis");
        mirrorAnalysisToggleButton.setFocusable(false);
        mirrorAnalysisToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mirrorAnalysisToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mirrorAnalysisToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorAnalysisToggleButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(mirrorAnalysisToggleButton);

        singleLRPAnalysisToggleButton.setAction(singleLRPAnalysisMenuItem.getAction());
        analysisToolBarBtnGroup.add(singleLRPAnalysisToggleButton);
        singleLRPAnalysisToggleButton.setText("Single");
        singleLRPAnalysisToggleButton.setToolTipText("Single Selection Analysis");
        singleLRPAnalysisToggleButton.setFocusable(false);
        singleLRPAnalysisToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        singleLRPAnalysisToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(singleLRPAnalysisToggleButton);

        analysisToolsToolBar.setRollover(true);

        foveaSelectButton.setAction(foveaSelectMenuItem.getAction());
        toolsToolBarBtnGroup.add(foveaSelectButton);
        foveaSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FVselect.png"))); // NOI18N
        foveaSelectButton.setToolTipText("Fovea Selection Selector Tool");
        foveaSelectButton.setEnabled(false);
        foveaSelectButton.setFocusable(false);
        foveaSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        foveaSelectButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/FVselectSelected.png"))); // NOI18N
        foveaSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        foveaSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foveaSelectButtonActionPerformed(evt);
            }
        });
        analysisToolsToolBar.add(foveaSelectButton);

        singleSelectButton.setAction(singleSelectMenuItem.getAction());
        toolsToolBarBtnGroup.add(singleSelectButton);
        singleSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SingleSelectIcon.png"))); // NOI18N
        singleSelectButton.setToolTipText("Selection Selector Tool");
        singleSelectButton.setEnabled(false);
        singleSelectButton.setFocusable(false);
        singleSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        singleSelectButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/SingleSelectSelectedIcon.png"))); // NOI18N
        singleSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        singleSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleSelectButtonActionPerformed(evt);
            }
        });
        analysisToolsToolBar.add(singleSelectButton);

        toolsToolBarBtnGroup.add(screenSelectButton);
        screenSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mouse-pointer-th_19x25.png"))); // NOI18N
        screenSelectButton.setToolTipText("Selection Pointer Tool");
        screenSelectButton.setEnabled(false);
        screenSelectButton.setFocusable(false);
        screenSelectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        screenSelectButton.setName(""); // NOI18N
        screenSelectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        screenSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenSelectButtonActionPerformed(evt);
            }
        });
        analysisToolsToolBar.add(screenSelectButton);

        fileMenu.setText("File");

        fileOpenMenuItem.setText("Open");
        fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpenMenuItem);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        fileMenu.add(Exit);

        jMenuBar1.add(fileMenu);

        analysisMenu.setText("Analysis");
        analysisMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisMenuActionPerformed(evt);
            }
        });

        spatialAnalysisMenuItem.setText("Spatial");
        spatialAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spatialAnalysisMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(spatialAnalysisMenuItem);

        ezAnalysisMenuItem.setText("EZ");
        ezAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ezAnalysisMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(ezAnalysisMenuItem);

        singleLRPAnalysisMenuItem.setText("Single");
        singleLRPAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleLRPAnalysisMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(singleLRPAnalysisMenuItem);

        mirrorAnalysisMenuItem.setText("Mirror");
        mirrorAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorAnalysisMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(mirrorAnalysisMenuItem);

        jMenuBar1.add(analysisMenu);

        toolsMenu.setText("Tools");
        toolsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsMenuActionPerformed(evt);
            }
        });

        foveaSelectMenuItem.setText("Select Fovea");
        foveaSelectMenuItem.setEnabled(false);
        foveaSelectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foveaSelectMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(foveaSelectMenuItem);

        singleSelectMenuItem.setText("Select Single");
        singleSelectMenuItem.setEnabled(false);
        singleSelectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleSelectMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(singleSelectMenuItem);

        lrpMenuItem.setText("Generate LRPs");
        lrpMenuItem.setEnabled(false);
        lrpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lrpMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(lrpMenuItem);

        jMenuBar1.add(toolsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(modesPanels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analysisToolsToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(octAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(analysisToolsToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(octAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modesPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
        openFileChooser.setFileFilter(new FileNameExtensionFilter("TIFF files", "tiff", "tif"));
        openFileChooser.setMultiSelectionEnabled(false);
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File tiffFile = openFileChooser.getSelectedFile();
            try {
                //read in image and keep track of the image for later use
                BufferedImage tiffBI = TiffReader.readTiffImage(tiffFile);
//                System.out.println("Read in tiff image!");
                OCT oct = Util.getOCT(tiffBI, this, octAnalysisPanel);
                if (oct == null) {
                    throw new IOException("OCT information missing, couldn't load OCT for analysis.");
                }
                //add the OCT to the analysis manager, it will take care of making it available to the OCT image panel for drawing
                analysisMetrics.setOct(oct);
                //display the selected image in the display
                octAnalysisPanel.setSize(new Dimension(tiffBI.getWidth(), tiffBI.getHeight()));
                octAnalysisPanel.repaint();
                validate();
                pack();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Image loading failed for " + tiffFile.getAbsolutePath()
                        + ", reason: " + ex.getMessage(), "Loading error!", JOptionPane.ERROR_MESSAGE
                );
            }
        } else {
//            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileOpenMenuItemActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void openFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFileChooserActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void foveaSelectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foveaSelectMenuItemActionPerformed
        //toggle if we are in fovea selection mode
        toolMode = (toolMode == ToolMode.SELECT_FOVEA) ? ToolMode.NONE : ToolMode.SELECT_FOVEA;
        singleSelectMenuItem.setSelected(false);
    }//GEN-LAST:event_foveaSelectMenuItemActionPerformed

    private void octAnalysisPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_octAnalysisPanelMouseClicked
        octAnalysisPanel.requestFocus();
        //only perform actions when mouse click occurs over image area
        if (analysisMode != null
                && analysisMetrics.getOct() != null
                && analysisMetrics.getOct().coordinateOverlapsOCT(evt.getX(), evt.getY())) {
            switch (evt.getButton()) {
                case MouseEvent.BUTTON1:
                    switch (analysisMode) {
                        case SINGLE:
                            switch (toolMode) {
                                case SELECT_SINGLE:
                                    //clear out any current analysis selection
                                    selectionLRPManager.removeSelections(false);
                                    octAnalysisPanel.repaint();
                                    //add new selections and redraw panel
                                    selectionLRPManager.addOrUpdateSelection(selectionLRPManager.getSelection(evt.getX(), "Selection"));
                                    octAnalysisPanel.repaint();
                                    break;
                                case SCREEN_SELECT:
                                    if (selectSelection(evt.getX()) != null) {
                                        octAnalysisPanel.repaint();
                                    }
                                    break;
                            }
                            break;
                        case MIRROR:
                            break;
                        case EZ:
                            OCTSelection selection = null;
                            switch (toolMode) {
                                case SELECT_SINGLE:
                                    //check that fovea has been selected already
                                    int fvp = selectionLRPManager.getFoveaCenterXPosition();
                                    if (fvp < 0) {
                                        JOptionPane.showMessageDialog(this, "The fovea must be identified before EZ selections can be made!", "EZ Analysis Error", JOptionPane.ERROR_MESSAGE);
                                        break;
                                    }
                                    //add new selections and redraw panel
                                    String selName = "EZ " + ((evt.getX() > fvp) ? "Right" : "Left");
                                    selection = selectionLRPManager.getSelection(evt.getX(), selName);
                                    break;
                                case SELECT_FOVEA:
                                    //set fovea selection
                                    selection = selectionLRPManager.getFoveaSelection(evt.getX());
                                    break;
                                case SCREEN_SELECT:
                                    selection = selectSelection(evt.getX());
                                    break;
                            }
                            if (selection != null) {
                                //clear out any current analysis selection
                                selectionLRPManager.removeSelection(selection, false);
                                octAnalysisPanel.repaint();
                                //add new selections and redraw panel
                                selectionLRPManager.addOrUpdateSelection(selection);
                                octAnalysisPanel.repaint();
                            }
                            break;
                        case SPATIAL:
                            if (toolMode == ToolMode.SELECT_FOVEA) {
                                //clear out any current analysis information
                                selectionLRPManager.removeSelections(true);
                                octAnalysisPanel.repaint();
                                //add new selections and redraw panel
                                selectionLRPManager.addOrUpdateSpatialSelections(evt.getX());
                                octAnalysisPanel.repaint();
                            }
                            break;
                        default:
                            break;
                    }
                    break;
                case MouseEvent.BUTTON3:
                    selectionLRPManager.removeSelections(true);
                    octAnalysisPanel.repaint();
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_octAnalysisPanelMouseClicked

    private void toolsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsMenuActionPerformed

    }//GEN-LAST:event_toolsMenuActionPerformed

    private void lrpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lrpMenuItemActionPerformed
//        System.out.println("Displaying LRPs...");
        selectionLRPManager.displayLRPs(this);
    }//GEN-LAST:event_lrpMenuItemActionPerformed

    private void spatialAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spatialAnalysisMenuItemActionPerformed
        restartAnalysis();
        enableAnalysisTools();
        analysisMode = AnalysisMode.SPATIAL;

    }//GEN-LAST:event_spatialAnalysisMenuItemActionPerformed

    private void analysisMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analysisMenuActionPerformed

    private void ezAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ezAnalysisMenuItemActionPerformed
        restartAnalysis();
        enableAnalysisTools();
        analysisMode = AnalysisMode.EZ;
        int fv = selectionLRPManager.getCenterOfFovea();
        selectionLRPManager.addOrUpdateSelection(new OCTLine(analysisMetrics.getOct().getImageOffsetX() + fv, 0, analysisMetrics.getOct().getLogOctImage().getHeight(), OCTSelection.FOVEAL_SELECTION, "FV"));
        selectionLRPManager.setFoveaCenterXPosition(fv);
        int[] ez = selectionLRPManager.getEZEdgeCoords();
        System.out.println("Got EZ: " + ez);
    }//GEN-LAST:event_ezAnalysisMenuItemActionPerformed

    private void singleLRPAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleLRPAnalysisMenuItemActionPerformed
        restartAnalysis();
        enableAnalysisTools();
        analysisMode = AnalysisMode.SINGLE;
    }//GEN-LAST:event_singleLRPAnalysisMenuItemActionPerformed

    private void mirrorAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorAnalysisMenuItemActionPerformed
        restartAnalysis();
        enableAnalysisTools();
        analysisMode = AnalysisMode.MIRROR;
    }//GEN-LAST:event_mirrorAnalysisMenuItemActionPerformed

    private void singleSelectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleSelectMenuItemActionPerformed
        toolMode = (toolMode == ToolMode.SELECT_SINGLE) ? ToolMode.NONE : ToolMode.SELECT_SINGLE;
        foveaSelectMenuItem.setSelected(false);
    }//GEN-LAST:event_singleSelectMenuItemActionPerformed

    private void octAnalysisPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_octAnalysisPanelKeyPressed
        OCTSelection sel = null;
        //determine direction to move the selection
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                sel = selectionLRPManager.getSelectedSelection();
                selectionLRPManager.moveSelectionRight(sel);
                break;
            case KeyEvent.VK_LEFT:
                sel = selectionLRPManager.getSelectedSelection();
                selectionLRPManager.moveSelectionLeft(sel);
                break;
            default:
                break;
        }
        //refresh the OCT analysis panel with the updated selection information
        octAnalysisPanel.repaint();
        //refresh the LRP
        selectionLRPManager.addOrUpdateSelection(sel);
    }//GEN-LAST:event_octAnalysisPanelKeyPressed

    private void mirrorAnalysisToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorAnalysisToggleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mirrorAnalysisToggleButtonActionPerformed

    private void singleSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleSelectButtonActionPerformed
        singleSelectMenuItem.setSelected(true);
        singleSelectMenuItemActionPerformed(evt);
    }//GEN-LAST:event_singleSelectButtonActionPerformed

    private void ezAnalysisToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ezAnalysisToggleButtonActionPerformed
        ezAnalysisMenuItemActionPerformed(evt);
    }//GEN-LAST:event_ezAnalysisToggleButtonActionPerformed

    private void spatialAnalysisToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spatialAnalysisToggleButtonActionPerformed
        setAnalysisMode(AnalysisMode.SPATIAL);
    }//GEN-LAST:event_spatialAnalysisToggleButtonActionPerformed

    private void octAnalysisPanelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_octAnalysisPanelKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_octAnalysisPanelKeyTyped

    private void screenSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenSelectButtonActionPerformed
        toolMode = (toolMode == ToolMode.SCREEN_SELECT) ? ToolMode.NONE : ToolMode.SCREEN_SELECT;
        for (MenuElement elm : toolsMenu.getSubElements()) {
            if (elm instanceof JCheckBoxMenuItem) {
                JCheckBoxMenuItem menuItem = (JCheckBoxMenuItem) elm;
                menuItem.setSelected(false);
            }
        }
    }//GEN-LAST:event_screenSelectButtonActionPerformed

    private void foveaSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foveaSelectButtonActionPerformed
        foveaSelectMenuItem.setSelected(true);
        foveaSelectMenuItemActionPerformed(evt);
    }//GEN-LAST:event_foveaSelectButtonActionPerformed

    private void octSharpRadiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_octSharpRadiusSliderStateChanged
        SwingUtilities.invokeLater(() -> {
            //update weight of sharpen filter for the OCT 
            double value = (double) ((JSlider) evt.getSource()).getValue() * 0.1d;
            analysisMetrics.getOct().setSharpenSigma(value);
            //redraw OCT use new sharpen weight
            octAnalysisPanel.repaint();
            //redraw LRPs to update with new information
            selectionLRPManager.updateLRPs();
        });
    }//GEN-LAST:event_octSharpRadiusSliderStateChanged

    private void octSmoothingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_octSmoothingSliderStateChanged
        SwingUtilities.invokeLater(() -> {
            //update smoothing factor for OCT
            double value = (double) ((JSlider) evt.getSource()).getValue() * 0.1D;
            analysisMetrics.getOct().setBlurFactor(value);
            //redraw OCT use new smoothing factor
            octAnalysisPanel.repaint();
            //redraw LRPs to update with new information
            selectionLRPManager.updateLRPs();
        });
    }//GEN-LAST:event_octSmoothingSliderStateChanged

    private void lrpSmoothingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lrpSmoothingSliderStateChanged
        //update smoothing factor for LRPs
        int value = ((JSlider) evt.getSource()).getValue();
        value = (value == 0) ? 1 : value; //can't have a value of zero for smoothing
        selectionLRPManager.setLrpSmoothingFactor(value);
        //update LRPs to use new smoothing factor
        selectionLRPManager.updateLRPs();
    }//GEN-LAST:event_lrpSmoothingSliderStateChanged

    private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSliderStateChanged
        switch (analysisMode) {
            case SINGLE:
            case MIRROR:
            case EZ:
                //update the selection width
                selectionLRPManager.setSelectionWidth(((JSlider) evt.getSource()).getValue());
                //redraw current selections on the image panel
                octAnalysisPanel.repaint();
                //update the LRPs for all of the selections (if they are being presented)
                selectionLRPManager.updateLRPs();
                break;
            case SPATIAL:
                //update the selection width
                selectionLRPManager.setSelectionWidth(((JSlider) evt.getSource()).getValue());
                //recalculate all of the selections with new widths and update LRPs if present
                selectionLRPManager.addOrUpdateSpatialSelections(selectionLRPManager.getFoveaCenterXPosition());
                //repaint selections on OCT image panel
                octAnalysisPanel.repaint();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_widthSliderStateChanged

    private void micronModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_micronModeButtonActionPerformed
        Hashtable<Integer, JLabel> labelTable = new Hashtable<>();
        for (int i = 1; i < 16; i++) {
            if (i % 2 == 1) {
                labelTable.put(i, new JLabel(df.format((double) i * analysisMetrics.getOct().getScale())));
            }
        }
        widthSlider.setLabelTable(labelTable);
    }//GEN-LAST:event_micronModeButtonActionPerformed

    private void pixelModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pixelModeButtonActionPerformed
        widthSlider.setLabelTable(widthSlider.createStandardLabels(2));
    }//GEN-LAST:event_pixelModeButtonActionPerformed

    private void logModeOCTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logModeOCTButtonActionPerformed
        octAnalysisPanel.setOCTMode(OCTMode.LOG);
    }//GEN-LAST:event_logModeOCTButtonActionPerformed

    private void linearOCTModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearOCTModeButtonActionPerformed
        octAnalysisPanel.setOCTMode(OCTMode.LINEAR);
    }//GEN-LAST:event_linearOCTModeButtonActionPerformed

    private void octSharpWeightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_octSharpWeightSliderStateChanged
        SwingUtilities.invokeLater(() -> {
            //update weight of sharpen filter for the OCT 
            float value = ((JSlider) evt.getSource()).getValue() * 0.01f;
            analysisMetrics.getOct().setSharpenWeight(value);
            //redraw OCT use new sharpen weight
            octAnalysisPanel.repaint();
            //redraw LRPs to update with new information
            selectionLRPManager.updateLRPs();
        });
    }//GEN-LAST:event_octSharpWeightSliderStateChanged

    public void enableAnalysisTools() {
        for (Component c : toolsMenu.getMenuComponents()) {
            c.setEnabled(true);
        }
        for (Component c : analysisToolsToolBar.getComponents()) {
            c.setEnabled(true);
        }
    }

    public void restartAnalysis() {
        selectionLRPManager.removeSelections(true);
        octAnalysisPanel.repaint();
        selectionLRPManager.setSelectionWidth(5);
        selectionLRPManager.setLrpSmoothingFactor(5);
        lrpSmoothingSlider.setValue(5);
        widthSlider.setValue(5);
        pixelModeButton.setSelected(true);
        logModeOCTButton.setSelected(true);
        selectionLRPManager.setFoveaCenterXPosition(-1);
    }

    private void setAnalysisMode(AnalysisMode am) {
        restartAnalysis();
        enableAnalysisTools();
        analysisMode = am;
        switch (am) {
            case SPATIAL:
                //ask for the desired distance between selections
                double micronsBetweenSelections = oct.util.Util.parseNumberFromInput((String) JOptionPane.showInputDialog(this, "Enter the desired distance between selections(microns):", "Distance between selections", JOptionPane.QUESTION_MESSAGE));
                analysisMetrics.setMicronsBetweenSelections((int) micronsBetweenSelections);
                break;
            case EZ:
            case MIRROR:
            case SINGLE:
            default:
                break;
        }
    }

    /**
     * Highlight an OCT selection on the screen if there is one that overlaps
     * the supplied X position (assumed to be the X position of a left mouse
     * button click). If the supplied X position does not overlap any selections
     * all currently selected selections will be unselected.
     *
     * @param clickXPosition
     * @return
     */
    public OCTSelection selectSelection(int clickXPosition) {
        //clear the currently selected OCT selection (if there even is one)
        selectionLRPManager.unselectSelections();
        octAnalysisPanel.repaint();
        //determine if click was over one of the EZ selections
        OCTSelection selection = selectionLRPManager.getOverlappingSelection(clickXPosition);
        if (selection != null) {
            //high light the selection and allow the user to move the selection with the arrow keys
            selection.setHighlighted(true);
            selectionLRPManager.setSelectedSelection(selection);
        }
        return selection;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OCTAnalysisUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OCTAnalysisUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu analysisMenu;
    private javax.swing.ButtonGroup analysisToolBarBtnGroup;
    private javax.swing.JToolBar analysisToolsToolBar;
    private javax.swing.JMenuItem ezAnalysisMenuItem;
    private javax.swing.JToggleButton ezAnalysisToggleButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JToggleButton foveaSelectButton;
    private javax.swing.JCheckBoxMenuItem foveaSelectMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JRadioButton linearOCTModeButton;
    private javax.swing.JRadioButton logModeOCTButton;
    private javax.swing.ButtonGroup lrpButtonGroup;
    private javax.swing.JMenuItem lrpMenuItem;
    private javax.swing.JPanel lrpSmoothingPanel;
    private javax.swing.JSlider lrpSmoothingSlider;
    private javax.swing.JRadioButton micronModeButton;
    private javax.swing.JMenuItem mirrorAnalysisMenuItem;
    private javax.swing.JToggleButton mirrorAnalysisToggleButton;
    private javax.swing.JPanel modesPanels;
    private oct.analysis.application.OCTImagePanel octAnalysisPanel;
    private javax.swing.JPanel octModePanel;
    private javax.swing.JSlider octSharpRadiusSlider;
    private javax.swing.JPanel octSharpWeightPanel;
    private javax.swing.JSlider octSharpWeightSlider;
    private javax.swing.JPanel octSmoothingPanel;
    private javax.swing.JSlider octSmoothingSlider;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JRadioButton pixelModeButton;
    private javax.swing.JToggleButton screenSelectButton;
    private javax.swing.ButtonGroup selModeButtonGroup;
    private javax.swing.JPanel selectionWidthModePanel;
    private javax.swing.JPanel selectionWidthSliderPanel;
    private javax.swing.JPanel sharpRadiusPanel;
    private javax.swing.JMenuItem singleLRPAnalysisMenuItem;
    private javax.swing.JToggleButton singleLRPAnalysisToggleButton;
    private javax.swing.JToggleButton singleSelectButton;
    private javax.swing.JCheckBoxMenuItem singleSelectMenuItem;
    private javax.swing.JMenuItem spatialAnalysisMenuItem;
    private javax.swing.JToggleButton spatialAnalysisToggleButton;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.ButtonGroup toolsToolBarBtnGroup;
    private javax.swing.JSlider widthSlider;
    // End of variables declaration//GEN-END:variables
}
